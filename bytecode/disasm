#!/usr/bin/env ruby

require_relative 'bgi_compiled_script'
require_relative 'bgi_bytecode'

class CheckNote
  attr_reader :cond_id
  def initialize(cond_id)
    @cond_id = cond_id
  end

  def inspect
    "CheckNote(#{@cond_id.inspect})"
  end
end

class Mul
  attr_reader :a1, :a2
  def initialize(a1, a2)
    @a1 = a1
    @a2 = a2
  end

  def inspect
    "*(#{@a1.inspect}, #{@a2.inspect})"
  end
end

class Address
  attr_reader :a
  def initialize(a)
    @a = a
  end

  def inspect
    sprintf("addr=0x%x", @a)
  end
end

#b = BgiBytecode.from_file('makerlogo')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/main')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/0010')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/0022')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/0030')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1000_sc')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1010')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1011')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1012')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1013')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1014')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1020')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1021')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1022')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1030')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1031e')
#b = BgiBytecode.from_file('extracted.d/eef/data01000.arc/1032')

#b._read

#bs = BgiCompiledScript.from_file('extracted.d/eustia_trial/data01000.arc/aiy00010')
bs = BgiCompiledScript.from_file('extracted.d/eustia_trial/data01000.arc/aiy00020')
bs._read

# Create sub addr => name mapping
sub_by_addr = {}
bs.subs.each { |sub|
  sub_by_addr[sub.addr] = sub.name
}

b = bs.body

@args = []

def output
  puts @args.inspect
  @need_nl = false
  @args = []
end

b.bytecode.entries.each { |i|
  if i.op_debug_info
    unless @args.empty?
      print '??? '
      output
    end
    o = i.op_debug_info
    puts if @need_nl
    printf "0x%06x:<%s:%4d>", i._debug['opcode'][:start] + 0x1c, o.file_name, o.line_num
    @need_nl = true
  elsif i.op_int
    #printf "(%d) ", i.op_int.val
    @args << i.op_int.val
  elsif i.op_addr
    @args << Address.new(i.op_addr.val)
  elsif i.opcode == 0x22
    @args << Mul.new(@args.pop, @args.pop)
  elsif i.opcode == 2
    @args << 'arg2'
  elsif i.opcode == 0xe7
    @args << CheckNote.new(@args.pop)
  elsif i.opcode == 0x1a
    print 'call '
    sub_addr = @args.pop
    sub_name = sub_by_addr[sub_addr.a]
    print sub_name ? sub_name : sub_addr.inspect
    print ' '
    output
  elsif i.op_str
    #print i.op_str.str.inspect
    #print ' '
    @args << i.op_str.str.encode('UTF-8')
  elsif BgiBytecode::OPCODES[i.opcode]
    op_sym = BgiBytecode::OPCODES[i.opcode]
    op_name = op_sym.to_s.gsub(/^opcodes_/, '')
    print "#{op_name} "
    output
  else
    printf "@%04x ", i.opcode
    output
  end
}

output
