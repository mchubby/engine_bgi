#!/usr/bin/env ruby
# coding: utf-8

require 'json'
require 'set'

require_relative 'bgi_decompiler'

class Bgi2StoryConverter
  def initialize(fn, char_map, voice_map, script_name)
    @char_map = char_map
    @voice_map = voice_map
    @script_name = script_name

    @decom = BGIDecompiler.new(fn)

    @out = []
    @imgs = {}
    @chars = {}

    @voice_seq = {}
    @layers = Set.new
  end

  def out
    {
      'meta' => {
        'id' => 'edelweiss_eiden_fantasia',
        'title' => {
          'en' => 'Edelweiss Eiden Fantasia',
          'jp' => 'エーデルワイス 詠伝ファンタジア',
        },
        'vndb_id' => 2093,
        'orig_lang' => 'jp',
        'asset_path' => 'extracted_eef',
        'resolution' => {'w' => 800, 'h' => 600},
      },
      'imgs' => @imgs,
      'chars' => @chars,
      'script' => @out,
    }
  end

  def simplify(v)
    if v.is_a?(BGIDecompiler::Mul)
      simplify(v.a1) * simplify(v.a2)
    else
      v
    end
  end

  def run
    @char_map.each_pair { |name, id|
      raise "Duplicate character ID: #{id} for #{@chars[id].inspect} and #{name.inspect}" if @chars[id]
      @chars[id] = {
        'name' => {'en' => name},
      }
    }

    @decom.each { |addr, filename, line_num, op, args|
      # Convert Mul(x, -1) to just "-x"
      args.map! { |a| simplify(a) }

      if op.is_a?(String)
        meth_name = "op_#{op}"
        if respond_to?(meth_name)
          send(meth_name, args)
        else
          warn "not implemented: #{meth_name} #{args.inspect}"
        end
      elsif op.is_a?(Array)
        op_call(op[1], args)
      end
    }
  end

  # [1, 1, 0, " ", "Now, it was finally the day of our date."]
  def op_say(args)
    expect_arg_count(args, 5)
    expect_arg(args, 0, 1)
    expect_arg(args, 1, 1)
    expect_arg(args, 2, 0)
    _, _, _, char, txt = args

    if char == ' '
      @out << {
        'op' => 'narrate',
        'txt' => {'en' => txt},
      }
    else
      ch = @char_map[char]
      raise "unknown character: #{char.inspect}" unless ch

      voice_ch = @voice_map[char]
      seq = @voice_seq[voice_ch] || 0
      seq += 1
      @voice_seq[voice_ch] = seq

      voice_fn = sprintf("voice/%s%s%03d0.ogg", voice_ch, @script_name, seq)

      if txt[0] == '"' and txt[-1] == '"'
        txt = txt[1..-2]
        @out << {
          'op' => 'say',
          'char' => ch,
          'txt' => {'en' => txt},
          'voice' => voice_fn,
        }
      elsif txt[0] == '(' and txt[-1] == ')'
        txt = txt[1..-2]
        @out << {
          'op' => 'think',
          'char' => ch,
          'txt' => {'en' => txt},
          'voice' => voice_fn,
        }
      else
        raise "unable to remove quotes: #{txt.inspect}"
      end
    end

    @out << {'op' => 'keypress'}
  end

  def op_bg(args)
    expect_arg_count(args, 2)
    fade_time, fn = args

    @out << {'op' => 'img', 'layer' => 'bg', 'fn' => "data02000.arc/#{fn}.png"}
  end

  # [1000, 0, 0, "mask001", "20vacantdlo"]
  def op_bg_transition(args)
    expect_arg_count(args, 5)
    fade_time, a1, a2, mask_fn, fn = args
    (1..2).each { |i| expect_arg(args, i, 0) }

    @out << {'op' => 'img', 'layer' => 'bg', 'fn' => "data02000.arc/#{fn}.png"}
  end

  #sprite [1, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "sak_25_bl_m", 0]
  def op_sprite(args)
    expect_arg_count(args, 16)

    has_lip_sync = args[0] # 0 or 1
    timeout = args[1]
    z = args[2]

    (3..12).each { |i| expect_arg(args, i, 0) }

    x_pos = args[13]

    fn = args[-2]
    layer_id = args[-1]

    h = {
      'layer' => layer_id,
      'fn' => "data02000.arc/#{fn}.png",
      'x' => x_pos,
      'z' => z + 100,
    }

    if @layers.include?(layer_id)
      # TODO: enable after implementation of regular images transfading
      #h['op'] = 'anim'
      #h['t'] = timeout
      h['op'] = 'img'
      @out << h
    else
      h['op'] = 'img'
      h['a'] = 0
      @out << h
      @out << {
        'op' => 'anim',
        'layer' => layer_id,
        'a' => 1,
        't' => timeout,
      }
    end

    @layers << layer_id
  end

  # [1, 200, 0, 0, 0, 0, 0, 1]
  def op_sprite_hide(args)
    expect_arg_count(args, 8)
    a0 = args[0] # 0 or 1
    timeout = args[1]
    (2..6).each { |i| expect_arg(args, i, 0) }
    layer_id = args[7]

    @out << {
      'op' => 'anim',
      'layer' => layer_id,
      'a' => 0,
      't' => timeout,
    }

    @layers.delete(layer_id)
  end

  # [0, 200]
  def op_sprite_hide_all(args)
    raise "unable to parse: #{args.inspect}" unless args == [0, 200]
    timeout = args[1]

    @layers.each { |layer_id|
      @out << {
        'op' => 'anim',
        'layer' => layer_id,
        'a' => 0,
        't' => timeout,
      }
    }
    @layers.clear
  end

  # [1000]
  def op_wait(args)
    expect_arg_count(args, 1)
    @out << {'op' => 'wait', 't' => args[0]}
  end

  # [2000, 100, "sel0340", 1]
  # [0, 100, "BGM011", 3]
  # [0, 100, "bw0010", 1]
  # [2000, 120, "selp0030", 0]
  def op_sound(args)
    expect_arg_count(args, 4)
    time_mark, vol, fn, channel = args

    fn.downcase!

    case fn
    when /^se[^l]/
      dst_fn = "se/#{fn}.ogg"
      is_loop = false
    else
      dst_fn = "sound/#{fn}.ogg"
      is_loop = true
    end

    @out << {
      'op' => 'sound_play',
      'fn' => dst_fn,
      'loop' => is_loop,
    }
  end

  # ["1010", 0]
  def op_set_script_file(args)
    expect_arg_count(args, 2)
    expect_arg(args, 1, 0)
    @script_name = args[0]
  end

  def expect_arg_count(args, n)
    raise "expected #{n} arguments, but there is #{args.count} - see #{args.inspect}" unless args.count == n
  end

  def expect_arg(args, i, val)
    raise "argument #{i} must be #{val.inspect}, it it is #{args[i].inspect} - see #{args.inspect}" unless args[i] == val
  end
end

CHAR_MAP = {
  'Kazushi' => 'kaz',

  'Appo' => 'appo',
  'Appo ' => 'appo2',
  'Appo, Pierre, Daigo' => 'appo_pie_dai',
  'Appo, Pierre, Daigo, Kazushi' => 'appo_pie_dai_kaz',
  'Old man' => 'old_man_1',
  'Old Man ' => 'old_man_2',
  'Old Lady' => 'old_lady',
  'Old woman' => 'old_woman',
  'Kazuko' => 'kazu',
  'Sakura' => 'saku',
  'Sakura, Ran, Mizuki' => 'saku_ran_mizu', # 'fema',
  'Johnny' => 'john',
  'Center' => 'cent',
  'Daigo' => 'dai',
  'Natsume' => 'natu',
  'Panchu' => 'pan',
  'Pierre' => 'pie',
  'Poko' => 'poko',
  'Mizuki' => 'mizu',
  'Everyone' => 'all',
  'Andou' => 'ando',
  'Kazushi, Pierre, Daigo' => 'kaz_pie_dai',
  'Kazushi, Poko' => 'kaz_poko',
  'Flowers' => 'flow', # 'saku',
  'Mei' => 'mei_',
  'Principal' => 'gaku',
  'Miya-san' => 'miya',
  'Kids' => 'kids1',
  'Kids ' => 'kids2',
  'Kids and Kazushi' => 'kids_kaz',
  'Girl 1' => 'girl1',
  'Girl 1 and 2' => 'girl1_girl2',
  'Girl 2' => 'girl2',
  'Witness' => 'wit1',
  'Witness ' => 'wit2',
  'Everyone ' => 'fema',
  'Search Team' => 'st',
  'Guy' => 'guy',
  'Four Stooges' => '4st',
  'Guy 1' => 'guy1',
  'Guy 2' => 'guy2',
  'Guy 3' => 'guy3',
  'Molester' => 'mol1', #'saku',
  'Molester ' => 'mol2', #'ran_',
  'Pillar' => 'pill',
  'Islander' => 'islf',
  'Islander ' => 'islm',
  'Yagami' => 'yaga',
  'Victim' => 'vict', # 'natu',
  'Sign' => 'sign',
  'Broadcast' => 'broa', # 'fema',
  'Haruka' => 'haru',
  'Ran' => 'ran_',
  'Rin' => 'rin_',
  'Rin, Kazushi' => 'rin_kazu' # 'rin_',
}

VOICE_MAP = {
  'Appo' => 'appl',
  'Appo ' => 'saku',
  'Appo, Pierre, Daigo' => 'male',
  'Appo, Pierre, Daigo, Kazushi' => 'male',
  'Old man' => 'male',
  'Old Man ' => 'male',
  'Old Lady' => 'fema',
  'Old woman' => 'fema',
  'Kazuko' => 'kazu',
  'Sakura' => 'saku',
  'Sakura, Ran, Mizuki' => 'fema',
  'Johnny' => 'male',
  'Center' => 'male',
  'Daigo' => 'dai_',
  'Natsume' => 'natu',
  'Panchu' => 'pan_',
  'Pierre' => 'pie_',
  'Poko' => 'male',
  'Mizuki' => 'mizu',
  'Everyone' => 'male',
  'Andou' => 'ando',
  'Kazushi, Pierre, Daigo' => 'male',
  'Kazushi, Poko' => 'male',
  'Flowers' => 'saku',
  'Mei' => 'mei_',
  'Principal' => 'gaku',
  'Miya-san' => 'miya',
  'Kids' => 'male',
  'Kids ' => 'male',
  'Kids and Kazushi' => 'male',
  'Girl 1' => 'fema',
  'Girl 1 and 2' => 'fema',
  'Girl 2' => 'fema',
  'Witness' => 'mizu',
  'Witness ' => 'mei_',
  'Everyone ' => 'fema',
  'Search Team' => 'male',
  'Guy' => 'male',
  'Four Stooges' => 'male',
  'Guy 1' => 'male',
  'Guy 2' => 'male',
  'Guy 3' => 'male',
  'Molester' => 'saku',
  'Molester ' => 'ran_',
  'Pillar' => 'male',
  'Islander' => 'fema',
  'Islander ' => 'male',
  'Yagami' => 'yaga',
  'Victim' => 'natu',
  'Sign' => 'male',
  'Broadcast' => 'fema',
  'Haruka' => 'haru',
  'Ran' => 'ran_',
  'Rin' => 'rin_',
  'Rin, Kazushi' => 'rin_',
}

#b = Bgi2StoryConverter.new('makerlogo')
#b = Bgi2StoryConverter.new('extracted.d/eef/data01000.arc/main')
#b = Bgi2StoryConverter.new('extracted.d/eef/data01000.arc/0010')
#b = Bgi2StoryConverter.new('extracted.d/eef/data01000.arc/0022')
#b = Bgi2StoryConverter.new('extracted.d/eef/data01000.arc/0030')
cnv = Bgi2StoryConverter.new('extracted.d/eef/data01000.arc/1010', CHAR_MAP, VOICE_MAP, nil)
#b = Bgi2StoryConverter.new('extracted.d/eef/data01000.arc/1011')
#b = Bgi2StoryConverter.new('extracted.d/eef/data01000.arc/1012')
#b = Bgi2StoryConverter.new('extracted.d/eef/data01000.arc/1013')
#cnv = Bgi2StoryConverter.new('src/data01000.arc/1010', CHAR_MAP, VOICE_MAP, nil)
#cnv = Bgi2StoryConverter.new('src/data01000.arc/1014', CHAR_MAP, VOICE_MAP, '1010')

cnv.run

File.open('3.js', 'w') { |out|
  out.print "program = "
  out.puts JSON.pretty_generate(cnv.out)
}
